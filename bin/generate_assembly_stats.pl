#use strict;
use warnings;
use Statistics::Basic qw(:all);

#####################################################
#Display information about the constructed scaffolds for downstream analysis.
#####################################################

#First we get the total number of contigs for each cluster
my ($scaffold_file, $cluster_file, $read_size, $coverage_file, $long_read_coverage_file, $species_file, $strain_dir, $scaffold_seq_file, $outfile, $opera_ms_dir, $nb_process, $mummer_dir) = @ARGV;

my $use_nucmer = 0;
    
print STDERR " *** Reading coverage file $coverage_file\n";
my %contig_cov = ();
read_coverage_file(\%contig_cov, $read_size, $coverage_file);
read_long_read_coverage_file(\%contig_cov, $long_read_coverage_file);

my %clusters_to_contigs = ();
if($cluster_file ne "NULL"){
    read_cluster_file(\%clusters_to_contigs, $cluster_file);
}

my %cluster_to_species = ();
if($species_file ne "NULL"){
    print STDERR " *** Reading reference clustering file $species_file\n";
    read_species_file(\%cluster_to_species, $species_file);
}

my %filled_scaffold_length = ();
my %op_scaffold_to_op_contig = ();#Corrspondance between the scaffold name generated by OPERA-LG and the final contig name genated at the end of OPERA-MS
analyse_scaff_seq(\%filled_scaffold_length, \%cluster_to_species, \%clusters_to_contigs, \%op_scaffold_to_op_contig, $scaffold_file, $scaffold_seq_file);

write_assembly_stats(\%filled_scaffold_length, \%cluster_to_species, \%clusters_to_contigs, \%contig_cov, \%op_scaffold_to_op_contig, $scaffold_file, $strain_dir, $outfile);

sub write_assembly_stats{
    my ($filled_scaffold_length, $cluster_to_species, $clusters_to_contigs, $contig_cov, $op_scaffold_to_op_contig, $scaffold_file,  $strain_directory, $outfile) = @_;
    
    #my @cov_list_short = [];
    #my @cov_list_long = [];

    my %cov_info = ();
    
    my $species_info_line = "";
    my ($ref_genome, $species_name);
    my %nb_species_strain = ();
    my $scaff_name = "";
    my $cluster_for_scaffold = undef;
    my @scaff_delim;
    my ($scaff_id, $median_cov, $length, $str_scaff);

    open (OUTFILE, '>', $outfile) or die;
    print OUTFILE "CONTIG_ID\tLENGTH\tSHORT_READ_COV\tLONG_READ_COV\tCLUSTER\tSPECIES\tNB_STRAIN\tREFERENCE_GENOME\n";
    open (SCAFFOLDS, $scaffold_file) or die;
    
    while(<SCAFFOLDS>){
	chomp $_;
	my @line = split(/\t/, $_);
	my $contig = $line[0];
	my $next_scaffold = $_;

	if ($_ =~ />/){
	    if ($scaff_name ne ""){
		#$median_cov_short = median(@cov_list_short);
		#$median_cov_long = median(@cov_list_long);
		
		#print STDERR " *** $scaffold_name\n";<STDIN>;# @cov_list . "\n";
		
		$str_scaff = get_scaffold_info($scaff_name,
					       $op_scaffold_to_op_contig,
					       $cluster_for_scaffold,
					       $cov_info{"size"},
					       $cov_info{"short"},
					       $cov_info{"long"},
					       $filled_scaffold_length, 
					       $cluster_to_species,
					       \%nb_species_strain, 
					       $strain_directory);
		print OUTFILE $str_scaff;
		#$scaf_name =~ /length:\s(\d*)\s/;
	    }

	    $numb_contigs_in_scaffold = 0; 
	    $scaff_name = $next_scaffold;
	    $cluster_for_scaffold = undef;
	    #undef(@cov_list_short);
	    #undef(@cov_list_long);
	    %cov_info = ("size", 0, "short", 0, "long", 0);
	}

	else{
	    #if contig is less than 500 bp, it will not exist in the clusters file.
	    if (!exists($clusters_to_contigs->{$contig})) {  next; }
	    $numb_contigs_in_scaffold++;
	    $cluster_for_scaffold = $clusters_to_contigs->{$contig};
	    #push @cov_list_short, $contig_cov->{$contig}->{"short"};
	    #push @cov_list_long, $contig_cov->{$contig}->{"long"};
	    foreach $key (keys %{$contig_cov->{$contig}}){
		#print STDERR " *** " . $key . " => " . $contig_cov->{$contig}->{$key} . "\n";<STDIN>;
		$cov_info{$key} +=  $contig_cov->{$contig}->{$key};
	    }
	}
    }

    #For the lats scaffold
    $str_scaff = get_scaffold_info($scaff_name,
				   $op_scaffold_to_op_contig,
				   $cluster_for_scaffold,
				   $cov_info{"size"},
				   $cov_info{"short"},
				   $cov_info{"long"},
				   $filled_scaffold_length, 
				   $cluster_to_species,
				   \%nb_species_strain, 
				   $strain_directory);
    
    print OUTFILE $str_scaff;
    
    close(SCAFFOLDS);
    close(OUTFILE);
}


sub get_scaffold_info{
    my ($scaff_name, $op_scaffold_to_op_contig, $cluster_for_scaffold, $scaffold_length, $cov_short, $cov_long, $filled_scaffold_length, $cluster_to_species, $nb_species_strain, $strain_directory) = @_;
    @scaff_delim = split(/\t/, $scaff_name);
    $scaff_id = $scaff_delim[0];
    
    #
    my $contig_name = $op_scaffold_to_op_contig->{$scaff_id}->{"NAME"};
    my $cluster_ID = $op_scaffold_to_op_contig->{$scaff_id}->{"CLUSTER"};
    my $length =  $filled_scaffold_length->{$scaff_id};
    #print STDERR " *** " . $scaff_id . "\t" . $length . "\t" . $cluster_ID . "\t" . $contig_name . "\n";<STDIN>;
    #foreach $k (keys %{$filled_scaffold_length}){
    #print STDERR " *** " . $k . "\t" . $filled_scaffold_length->{$k} . "\n";<STDIN>;
    #}
    
    #   
    #print STDERR " *** $scaffold_name\n";<STDIN>;# @cov_list . "\n";
    
    my $no_species_info_line = "NA\tNA\tNA\tNA";
    my $str_res = $contig_name;
    my $species_info_line;
    if (defined($cluster_for_scaffold)){
	#$cov_short = 0;$cov_long;
	$cov_short = sprintf("%.2f", $cov_short/$scaffold_length);
	$cov_long = sprintf("%.2f", $cov_long/$scaffold_length);
	$str_res .= "\t$length\t$cov_short\t$cov_long\t";
    }
    else{
	$str_res .= "\t$length\tNA\tNA\t";
    }
    #print STDERR " **** $scaf_name $length\n";
    
    
    if (defined $cluster_for_scaffold && exists $cluster_to_species->{$cluster_for_scaffold}){
	$species_info_line = "";
	
	#Get the species name
	$ref_genome = $cluster_to_species->{$cluster_for_scaffold};
	@tmp = split(/\//, $ref_genome);
	@tmp_2 = split(/\__/,$tmp[@tmp-1]);
	#
	$species_name = $tmp_2[0];
	$ref_genome = $tmp_2[1];
	#
	if(! exists $nb_species_strain->{$species_name}){
	    $nb_s = "NA";
	    $s_s_dir = "$strain_directory/$species_name";
	    if(-d $s_s_dir){
		#print STDERR "ll $s_s_dir/STRAIN_*/contigs.fa/n";
		$nb_s = `ls -l $s_s_dir/STRAIN_*/contigs.fa | wc -l`;chop $nb_s;
	    }
	    $nb_species_strain->{$species_name} = $nb_s;
	}
	
	$str_res .= $cluster_ID . "\t" . $species_name . "\t" . $nb_species_strain->{$species_name} . "\t" . $ref_genome;
    }

    else{
	$str_res .= $no_species_info_line;
    }
    
    
    $str_res .= "\n";

    return $str_res;
    
}

sub analyse_scaff_seq{
    my ($filled_scaffold_length, $clusters_to_contigs, $cluster_to_species, $op_scaffold_to_op_contig, $scaffold_file, $scaffold_seq_file) = @_;
    
    open (SCAFFOLDS, $scaffold_file) or die;
    open (SCAFFOLDSEQ, $scaffold_seq_file) or die "File $scaffold_seq_file not found\n";
    open(OUT, ">$scaffold_file.cname");
    my $scaffold_seq;
    
    my @tmp_name;
    my $scaffold_ID = "";
    my $scaffold_cluster_ID = "";
    while (<SCAFFOLDS>){
	chomp $_;
	if ($_ =~ />/){
	    @line = split(/\t/, $_);
	    $scaffold = $line[0];
	    #print STDERR " *** " . $scaffold . "\n";<STDIN>;
	    
	    #update of the name
	    if ($scaffold =~ />opera_scaffold_(.*)/){#this scaffold does not belong to a cluster
		$scaffold_ID = $1;
		$scaffold_cluster_ID = "NA";
	    }
	    if ($scaffold =~ />strain(.*)_opera_scaffold_(.*)/){#this scaffold does not belong to a cluster
		$scaffold_ID++;
		$scaffold_cluster_ID = "cluster_".$1;
	    }
	    $op_scaffold_to_op_contig->{$scaffold} = {"NAME", "opera_contig_$scaffold_ID", "CLUSTER", $scaffold_cluster_ID};
	    #
	    <SCAFFOLDSEQ>;
	    $scaffold_seq = <SCAFFOLDSEQ>;
	    $length = length($scaffold_seq) - 1;
	    $filled_scaffold_length->{$scaffold} = $length;
	    #
	    print OUT (substr($scaffold, 1)) . "\t" . $op_scaffold_to_op_contig->{$scaffold}->{"NAME"} . "\n";
	    #
	    #print STDERR " *** *** $scaffold_name $scaffname $length\n";#<STDIN>;
	}
    }
    
    close(OUT);
    close(SCAFFOLDS) or die;
    close(SCAFFOLDSEQ) or die;
}

sub read_cluster_file{
    my ($clusters_to_contigs, $cluster_file) = @_;
    open (CLUSTERS, $cluster_file) or die;
    while (<CLUSTERS>){
	chomp $_;
	my @line = split(/\t/, $_);
	my $contig = $line[0];
	my $cluster = $line[1];
	$clusters_to_contigs{$contig} = $cluster;
    }
    close(CLUSTERS);
}

sub read_species_file{
    my ($cluster_to_species, $species_file) = @_;
    open (SPECIES, $species_file) or die;
    my $cluster_name = "";
    my $best_species = "";
    while(<SPECIES>){
	chomp $_;
	if ($_ =~ />(.*)/){
	    if ($cluster_name ne ""){
		$cluster_to_species->{$cluster_name} = $best_species if ($best_species ne ""); 
	    #print STDERR "$best_species, $cluster_name\n";
	    }
	    #print STDERR $1 . "\n";
	    $cluster_name = $1;
	    $best_species = "";
	}

	else{
	    if ($best_species eq ""){
		$best_species = $_;
	    }
	}
    }
}

sub read_coverage_file{
    my ($contig_cov, $read_size, $contigs_windows_file) = @_;
    open (FILE, $contigs_windows_file) or die "$contigs_windows_file not found";
    my $header = <FILE>;
    chomp $header;
    my @line = split (/ /, $header);
    my $window_size = $line[3];
    while (<FILE>) {
	chomp $_;	
	#The line with the contig ID
	my @line = split (/\t/, $_);
	my $contig = $line[0];
	my $size = $line[1];
	my $nb_window = $line[4];
	#The line with number of arriving reads
	my $read_count = <FILE>;
	chop $read_count;
	#print STDERR $read_count."\t|".$nb_window."|\t".$window_size."\n";<STDIN>;
	#Skip the next line that contian the windows (need to compute the variance latter)
	my $str = <FILE>;chop $str;
	#$contig_cov->{$contig} = {"size", $size, "short", $read_count/($nb_window*$window_size), "long", 0};
	$contig_cov->{$contig} = {"size", $size, "short", $read_count*(2*$read_size), "long", 0};
    }
}

sub read_long_read_coverage_file{
    my ($contig_cov, $long_read_coverage_file) = @_;
    open(FILE, $long_read_coverage_file);
    my ($contig, $v, $cov);
    while(<FILE>){
	chop $_;
	($contig, $size, $cov) = split(/\t/, $_);
	#$contig = $line[0];
	#$cov = $line[2];
	$contig_cov->{$contig}->{"long"} = $size * $cov;
    }
    
}

sub get_species_metrics{
    my ($cluster, $species, $dir) = @_; 
    my $mashfile = "$dir/MASH/$cluster.dat";
    my $metrics = "";
    open (MASHFILE, $mashfile) or die("$cluster, $species, $dir"); 

    while (<MASHFILE>){
        chomp $_;
        my @line = split(/\t/, $_);
        if ($line[0] eq $species){
            $metrics = "C-$cluster;$line[2];$line[4]";
        }
    }

    close (MASHFILE);

    return $metrics;
}
